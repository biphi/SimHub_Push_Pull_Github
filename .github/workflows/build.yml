name: Build-Release

on:
  push:
    tags: [ 'v*.*.*.*' ]  # only four-part version tags

jobs:
  build_release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure NuGet (CLI)
        uses: nuget/setup-nuget@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore (packages.config)
        run: nuget restore SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj -PackagesDirectory packages -SolutionDirectory . -Verbosity detailed
        shell: pwsh

      - name: Build Release
        run: msbuild SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj /t:Clean,Build /p:Configuration=Release /p:Platform=AnyCPU /m /p:RestorePackages=false
        shell: pwsh

      - name: List output directories (diagnostic)
        run: |
          Write-Host 'Workspace:' (Get-Location)
          Write-Host 'Top level:'; Get-ChildItem -Name
          Write-Host 'Project dir:'; Get-ChildItem SimHub_Push_Pull_Github -Name
          Write-Host 'Bin/Release contents:'
          if (Test-Path SimHub_Push_Pull_Github/bin/Release) { Get-ChildItem SimHub_Push_Pull_Github/bin/Release } else { Write-Warning 'Release dir missing' }
        shell: pwsh

      - name: Collect artifacts
        run: |
          New-Item -ItemType Directory -Path artifact -Force | Out-Null
          $outDir = 'SimHub_Push_Pull_Github/bin/Release'  # korrigiert
          if (Test-Path $outDir) {
            Get-ChildItem $outDir -Filter SimHub_Push_Pull_Github.dll -Recurse | ForEach-Object { Copy-Item $_.FullName artifact/ }
            Get-ChildItem $outDir -Filter SimHub_Push_Pull_Github.pdb -Recurse | ForEach-Object { Copy-Item $_.FullName artifact/ -ErrorAction SilentlyContinue }
            if (Test-Path "$outDir/lib") { robocopy "$outDir/lib" artifact/lib /E /NFL /NDL /NJH /NJS /NC /NS | Out-Null }
          } else { Write-Warning "Output directory not found: $outDir" }
          if (-not (Get-ChildItem artifact -Recurse | Where-Object { -not $_.PSIsContainer })) {
            Write-Warning 'No DLLs collected – creating placeholder.'
            'NO_BUILD_OUTPUT' | Out-File artifact/placeholder.txt
          }
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build
          path: artifact
          if-no-files-found: warn

      - name: Validate tag format
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          $tag = "$env:GITHUB_REF" -replace 'refs/tags/',''
          if ($tag -notmatch '^v\d+\.\d+\.\d+\.\d+$') { Write-Error "Invalid tag format '$tag'. Expected v1.0.0.1 pattern." }
        shell: pwsh

      - name: Create ZIP
        if: startsWith(github.ref, 'refs/tags/v')
        run: Compress-Archive -Path artifact/* -DestinationPath plugin.zip
        shell: pwsh

      - name: Publish release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: plugin.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
