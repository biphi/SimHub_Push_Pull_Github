name: Build

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*.*.*.*' ] # vierteilige Version: vMajor.Minor.Patch.Build
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure NuGet (CLI)
        uses: nuget/setup-nuget@v2

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore (packages.config)
        run: |
          nuget restore SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj -PackagesDirectory packages -SolutionDirectory . -Verbosity detailed
        shell: pwsh

      - name: Build Release
        run: |
          msbuild SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj /t:Clean,Build /p:Configuration=Release /p:Platform=AnyCPU /m /p:RestorePackages=false
        shell: pwsh

      - name: Collect artifacts
        if: success()
        run: |
          New-Item -ItemType Directory -Path artifact -Force | Out-Null
          Copy-Item SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/Release/SimHub_Push_Pull_Github.* artifact -ErrorAction SilentlyContinue
          if (Test-Path SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/Release/lib) {
            robocopy SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/Release/lib artifact/lib /E /NFL /NDL /NJH /NJS /NC /NS | Out-Null
          }
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build
          path: artifact
          if-no-files-found: warn

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: windows-latest
    steps:
      - name: Validate tag format
        run: |
          $tag = "$env:GITHUB_REF" -replace 'refs/tags/',''
          if ($tag -notmatch '^v\d+\.\d+\.\d+\.\d+$') { Write-Error "Invalid tag format '$tag'. Expected v1.0.0.1 pattern." }
        shell: pwsh
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-build
          path: dist
      - name: Create ZIP
        run: Compress-Archive -Path dist/* -DestinationPath plugin.zip
        shell: pwsh
      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: plugin.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
