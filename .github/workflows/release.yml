name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Neuen Tag erstellen (z.B. v1.2.3, v1.2.3.1, v1.2.3-beta1, v1.2.3+build.5). Löst danach automatisch den Build durch den Tag-Push aus.'
        required: true

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag != '' }}
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        shell: pwsh
        run: |
          if (-not "$env:INPUT_TAG".Trim()) { Write-Error "Tag leer"; exit 1 }
          # Erlaubt: vMAJOR.MINOR.PATCH[.REV][ -prerelease ][ +build ]
          $pattern = '^v\d+\.\d+\.\d+(?:\.\d+)?(?:-[0-9A-Za-z._-]+)?(?:\+[0-9A-Za-z._-]+)?$'
          if ($env:INPUT_TAG -notmatch $pattern) {
            Write-Error "Tag muss SemVer-ähnlich sein: vMAJOR.MINOR.PATCH optional .REV, -preRelease, +build (z.B. v1.2.3, v1.2.3.4, v1.2.3-beta, v1.2.3+build.5)."; exit 1
          }
          if (git rev-parse -q --verify "refs/tags/$env:INPUT_TAG") {
            Write-Error "Tag $env:INPUT_TAG existiert bereits."; exit 1
          }
        env:
          INPUT_TAG: ${{ inputs.tag }}

      - name: Create annotated tag
        shell: pwsh
        run: |
          git tag -a "$env:INPUT_TAG" -m "Release $env:INPUT_TAG"
          git push origin "$env:INPUT_TAG"
          Write-Host "Tag $env:INPUT_TAG erstellt und gepusht. Build erfolgt im separaten Tag-Push-Run."
        env:
          INPUT_TAG: ${{ inputs.tag }}

  build-and-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    runs-on: windows-latest
    env:
      PROJECT_PATH: SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj
      BUILD_CONFIG: Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore
        shell: pwsh
        run: |
          if (Test-Path SimHub_Push_Pull_Github.sln) {
            msbuild SimHub_Push_Pull_Github.sln /t:Restore /m
          } else {
            msbuild $env:PROJECT_PATH /t:Restore /m
          }

      - name: Build
        shell: pwsh
        run: msbuild $env:PROJECT_PATH /p:Configuration=$env:BUILD_CONFIG /m /verbosity:minimal

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          $tag = "$env:GITHUB_REF" -replace '^refs/tags/'
          $asmInfoPath = "SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/Properties/AssemblyInfo.cs"
          $assemblyVersion = ''
            if (Test-Path $asmInfoPath) {
              $asmInfo = Get-Content $asmInfoPath
              $match = ($asmInfo | Select-String -Pattern 'AssemblyFileVersion\("([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)"\)').Matches
              if ($match.Count -gt 0) { $assemblyVersion = $match[0].Groups[1].Value }
            }
          if (-not $assemblyVersion) { $assemblyVersion = $tag.TrimStart('v') }
          "version=$assemblyVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Release-Version: $assemblyVersion (Tag: $tag)"

      - name: Package
        id: package
        shell: pwsh
        run: |
          $base = "SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/$env:BUILD_CONFIG"
          $tfm = Join-Path $base 'net48'
          $target = if (Test-Path $tfm) { $tfm } elseif (Test-Path $base) { $base } else { throw "Kein Build-Output gefunden." }
          if (-not (Get-ChildItem $target -Filter *.dll -Recurse | Where-Object { $_.Name -notmatch '^Microsoft\.' })) { Write-Warning "Keine nicht-Microsoft DLL gefunden." }
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          Copy-Item -Recurse -Force (Join-Path $target '*') dist
          Compress-Archive -Path dist/* -DestinationPath plugin.zip -Force
          $main = (Get-ChildItem dist -Filter *.dll -Depth 1 | Select-Object -First 1).Name
          if ($main) { "maindll=$main" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-dist
          path: |
            dist/**
            plugin.zip
          retention-days: 14

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            plugin.zip
          generate_release_notes: true
          name: Release ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
