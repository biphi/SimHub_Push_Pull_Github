name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name to create (e.g. v1.0.0)'
        required: false

jobs:
  create-tag:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.tag != '' }}
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        run: |
          git tag $env:TAG
          git push origin $env:TAG
        env:
          TAG: ${{ inputs.tag }}

  build-and-release:
    needs: [create-tag]
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.tag != '' }}
    runs-on: windows-latest
    env:
      PROJECT_PATH: SimHub_Push_Pull_Github/SimHub_Push_Pull_Github.csproj
      BUILD_CONFIG: Release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore packages
        shell: pwsh
        run: |
          if (Test-Path SimHub_Push_Pull_Github.sln) {
            Write-Host 'Restoring via solution file'
            msbuild SimHub_Push_Pull_Github.sln /t:Restore /m
          } else {
            Write-Host 'Restoring via project file'
            msbuild $env:PROJECT_PATH /t:Restore /m
          }

      - name: Build
        run: msbuild $env:PROJECT_PATH /p:Configuration=$env:BUILD_CONFIG /p:Platform="Any CPU" /m /verbosity:minimal

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          $tag = "$env:GITHUB_REF" -replace 'refs/tags/'
          if (-not $tag) { $tag = 'v0.0.0' }
          $asmInfoPath = "SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/Properties/AssemblyInfo.cs"
          $assemblyVersion = ''
          if (Test-Path $asmInfoPath) {
            $asmInfo = Get-Content $asmInfoPath -ErrorAction SilentlyContinue
            $m = ($asmInfo | Select-String -Pattern 'AssemblyFileVersion\("([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)"\)').Matches
            if ($m.Count -gt 0) { $assemblyVersion = $m[0].Groups[1].Value }
          }
          if (-not $assemblyVersion) { $assemblyVersion = $tag.TrimStart('v') }
          Write-Host "Tag: $tag / AssemblyVersion: $assemblyVersion"
          "version=$assemblyVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: List build output
        shell: pwsh
        run: |
          $base = "SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/$env:BUILD_CONFIG"
          Write-Host "Listing base output: $base"; if (Test-Path $base) { Get-ChildItem -Recurse $base } else { Write-Host 'Base output not found' }
          $tfm = Join-Path $base 'net48'
          if (Test-Path $tfm) { Write-Host "Listing TFM output: $tfm"; Get-ChildItem -Recurse $tfm }

      - name: Prepare artifacts
        id: prep
        shell: pwsh
        run: |
          $base = "SimHub_Push_Pull_Github/SimHub_Push_Pull_Github/bin/$env:BUILD_CONFIG"
          $tfm = Join-Path $base 'net48'
          $outDir = "artifact"
          if (Test-Path $tfm) { $target = $tfm } elseif (Test-Path $base) { $target = $base } else { throw "No build output folder found." }
          if (-not (Get-ChildItem $target -Filter *.dll -Recurse | Where-Object { $_.Name -ne 'Microsoft.*' })) {
            Write-Host 'WARNING: No plugin DLL (non-Microsoft) found.'
          }
            New-Item -ItemType Directory -Path $outDir -Force | Out-Null
          Copy-Item -Recurse -Force (Join-Path $target '*') $outDir
          Compress-Archive -Path $outDir/* -DestinationPath plugin.zip -Force
          $mainDll = (Get-ChildItem $outDir -Filter *.dll -Depth 1 | Select-Object -First 1).Name
          if ($mainDll) { "maindll=$mainDll" | Out-File -FilePath $env:GITHUB_OUTPUT -Append }

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-binaries
          path: |
            artifact/**
            plugin.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            plugin.zip
            artifact/*.dll
          generate_release_notes: true
          name: Release ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
